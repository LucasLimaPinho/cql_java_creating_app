CREATE KEYSPACE; # Definição de um KEYSPACE 


CREATE KEYSPACE vehicle_tracker WITH REPLICATION = { 'class': 'SimpleStrategy', 'replication_factor' = 1};

CREATE KEYSPACE vehicle_tracker WITH REPLICATION = { 'class': 'NetworkTopologyStrategy', 
	'dc1': 3, 'dc2': 2};

# NetworkTopologyStrategy determina que seus dados estarão distribuídos em diferentes data_centers
# Diferentemente de estratégia simples em que o cluster se concentra em somente 1 datacenter.
# 'dc1': 3 -> 3 é igual ao replication_factor para data_center1. Devemos ter pelo menos 3 nós para o data_center1
# 'dc2': 2 -> 2 é igual ao replication_factor para data_center2. Devemos ter pelo menos 2 nós para o data_center1


# Deleting a KEYSPACE

DROP KEYSPACE vehicle_tracker;

CREATE KEYSPACE home_security WITH REPLICATION = { 'class' = 'SimpleStrategy', 'replication_factor' =1};

# Criando TABELAS DENTRO DE UM KEYSPACE - Lembre-se: tipicamente um KEYSPACE por aplicação. É semelhante ao SCHEMA do SQL.
# home_id, datetime, event, code_used serão colunas definidas dentro da tabela que faz parte do keyspace home_security
# Cassandra é row-oriented.

CREATE TABLE activity(
	home_id text,
	datetime timestamp,
	event text,
	code_used text,
	PRIMARY KEY (home_id, datetime)
)WITH CLUSTERING ORDER BY (datetime DESC); #Defining the CLUSTERING ORDER durante a criação é essencial

# Por mais que possamos utilizar comandos ALTER TABLE para adicionar colunas (por exemplo), 
# não podemos mudar a forma de ORDER BY das tabelas no Cassandra após sua criação;



# PRIMARY KEY só podem ocorrer uma vez. PRIMARY KEY is a way to uniquely identify a record in CQL table.

DROP TABLE activity;

USE home_security; # KEYSPACE home_security

# THE PARTITION KEY é HASHED a partir das linhas utulizando Murmur3 by default para determinar qual nó no cluster irá guardar a partição
# THE PARTITION KEY gets HASHED by the partitioner in this way -> receives a number from 2**-63 to 2**63
# Durante criação da TABELA, the PARTITION KEY é o valor na PRIMARY KEY. Será sempre o valor antes da primeira vírgula.
# No caso, o processo de partição será feito levando em consideração home_id -> primeiro índice da PRIMARY KEY

### WRITING DATA 

# INSERT INTO command para escrever uma única linha
# COPY FROM (import) commando -> útil para importar dados de um csv por exemplo
# COPY TO (export) também pode ser usado para exportar para csv
# sstableloader tool -> buckloading. Streams SSTable files para um cluster vivo.
#activity here is the TABLE;


COPY activity (home_id,  datetime, event, code_used) FROM '/home/vm1/Desktop/Files/Chapter7/events.csv'
	WITH header = true AND delimiter = '|';

# Para entender como os dados são armazenados no cassandra -> acessar bin/cassandra-cli
# RowKey é o mesmo que PARTITION KEY que é o mesmo que primeiro índice do PRIMARY KEY;
# RowKey é herdado da aplicação Thrift
# O armazenamento interno no Cassandra sempre leva em consideração a PARTITION KEY, utilizar o bin/cassandra-cli ajuda a entender.
# No final, quando temos a mesma PARTITION KEY para várias linhas, transforma em um modelo KEY-VALUE com N colunas para o partition key
# sendo N o número de redundâncias do primeiro índice da PRIMARY KEY;

# bin/cassandra-cli acompanhando de USE keyspace e LIST table irá retornar X rows
# X será o número de partitions keys existentes na table.
# Cada partition key será alojada em um nó de acoro com os endingpoints do token range

# How Data is Stored on Disk???? SSTable after latency time in cache.
# Quando os dados são escritos em Cassandra, eles vão ambos para um log em disco (para playback em caso de falha)
# quanto para um MEMCACHE
# QUando o MEMCACHE de uma TABLE está cheio, ele é descarregado para disco como um SSTable.

# Para cada SSTable em cada nó tem um MEMCACHE.
# As SSTable são gravadas em disco em local definido pelo arquivo de configuração cassandra.yaml 
# por default: (/var/lib/cassandra/data directory) ----> será o Data.db file dentro do diretório do KEYSPACE e TABLE desejado
# Quando o MEMCACHE não está cheio, não será gerado SSTable e a pasta /var/lib/cassandra/data/home_security/acitivity estará vazia

# Para ver o conteúdo de uma SSTable, podemos utilizar:

bin/sstable2json var/lib/cassandra/data/home_security/activity/home_security-activity-jb-1Data.db

bin/nodetool flush home_security # flushs the MEMCACHE of all tables in KEYSPACE home_security

## MODELANDO DADOS EM CASSANDRA: o fato de não existir JOINS em Cassandra talvez seja a principal diferença entre
# um banco relacional e um banco de dados distribuído como Cassandra - o que também difere a linguagem SQL do CQL

# Como resultado: data modelling in Cassandra precisa ser feito de uma forma que que todos os dados disponíveis para uma query
# estejam presentes em uma única tabela. 

# WHERE clauses geralmente precisam inserir uma PARTITION KEY (primeiro índice da PRIMARY KEY)

# Querys que utilizam WHERE sem PARTITION KEY não funcionam. A PARTITION KEY pode ser composta.

SELECT * FROM activity WHERE home_id = 'H01474777' AND datetime > '2014-05-22 00:00:00';

# Comando acima funciona tendo primary key composta e possuindo partition key.

SELECT * from activity WHERE home_id = 'H01474777' AND code_used = '5599' # ---> não funciona pois não possui partition key

# Criando SECONDARY INDEXES, estes podem ser utilizados em WHERE clauses;
# SECONDARY INDEXES não aumenta velocidade de query -> apenas possibilita que querys com WHERE funcionem
# CREATE INDEX -> criar índices secundários para permitir querys where sem partition key

CREATE INDEX code_used_index ON activity (code_used);
SELECT * from activity WHERE home_id = 'H01474777' AND code_used = '5599' -> agora podemos trabalhar com isso

# COMPOSITE PARTITION KEY - exemplo abaixo de criação de uma partition key composta; Controlar o tamanho de uma partição
# Todos os dados de uma partição devem caber em um disco no nó durante partição e a partição não deve crescer indefinidamente;


CREATE TABLE location(
	vehicle_id text,
	date text,
	time timestamp,
	latitude double,
	longitude double,
	PRIMARY KEY((vehicle_id, date),time)
	);

### CRIANDO APLICAÇÃO COM JAVA - download binary tarball com driver para aplicação java

# https://docs.datastax.com/en/developer/java-driver/2.0/

# A classe CLUSTER conecta com o cluster do Cassandra.


	







